//make throttle directly controllable.
set t to 1.
lock throttle to t.

//Kerbins G
set kerbinG to 9.8.

//Mun G
set munG to 1.63.

//make heading controllable.
set steer to heading(90, 90).
lock steering to steer.

//staging trigger.
set lockstaging to 0.
when maxthrust = 0 then {
    if lockstaging = 0 {
        print "Staging".
        stage.
        wait 0.1.
    }
    preserve.
}.


//Launches to a default apoapsis of 80000
function launch {
    parameter desiredApo is 80000.
    print "lets get to orbit!".
    until ship:apoapsis > desiredApo {
        set correctedSpeed to ship:velocity:surface:mag - 100.

        if correctedSpeed < 0 {
            set correctedSpeed to 0.
        }.
        set down to 90 - (correctedSpeed/10).

        if down < 5 {
            set down to 5.
        }

        set steer to heading(90, down).
    }
    print "cutting throttle".
    set t to 0.
}

function coast {
    parameter desiredApo is 80000.
    print "coasting!".
    until eta:apoapsis < 5 {
        set steer to heading(90, 0).
        if ship:apoapsis < desiredApo {
            set t to 1.
        }

        if ship:apoapsis > desiredApo {
            set t to 0.
        }
    }
}

//todo: finetune the finetune.
//todo: make acceleration smooth again!.
function finetune {
    parameter desiredApo is 80000.
    coast(desiredApo).
    until ship:periapsis > (desiredApo * 0.975) {
        set steer to heading(90, 2).
        if eta:apoapsis < 5 {
            set t to 1.
        }

        if eta:apoapsis > 5 {
            set t to 0.
        }

        if eta:apoapsis > 100 {
            set steer to heading(90, 10).
            set t to 1.
        }
    }
}

//todo: find prograde.
//todo: find optimal dv.
function findNode {
    set mNode to node(time:seconds + 10, 0, 0, 860).
    add mNode.
    until (encounter = "None") = false {
        set newEta to (mNode:eta + 10).
        remove mNode.
        set mNode to node(time:seconds + newEta, 0, 0, 860).
        add mNode.
    }
}

function finetuneNode {
    set target to Mun.
    set dV to 860.
    set d to 0.05.
    set targetPeri to 20000.

    until encounter:periapsis < 20000 {
        set peri to encounter:periapsis.
        set newEta to mNode:eta + d.
        remove mNode.
        set mNode to node(time:seconds + newEta, 0, 0, dV).
        add mNode.
        if encounter:periapsis > peri {
            set d to (d * -1).
        }
    }
}

//gets maximum acceleration for the current point in time.
function getMaxA {
    return (maxthrust / ship:mass).
}

function getTimeToBurn {
    return nextNode:deltaV:mag / getMaxA().
}


//Warps to the desired time and waits with executing the script until then.
//Waits until thrust is zero to make sure current
//acceleration does not disrupt warp.
function warpSeconds {
    parameter seconds.
    wait until (getThrust() = 0).
    set refTime to time:seconds.
    warpTo(time:seconds + seconds).
    wait until(time:seconds > refTime + seconds).
    print "Warp completed!".
}

//gets the current combined thrust of all engines.
function getThrust {
    list engines in engineList.
    declare local thrust to 0.
    for engine in engineList {
        set thrust to (thrust + engine:thrust).
    }
    return thrust.
}

//Warps to the next node with a default offset of 5 seconds before burn time.
//Waits until current thrust is 0, to prevent warping problems.
function warpToNode {
    parameter offset is 5.
    wait until (getThrust() = 0).
    warpSeconds(mNode:eta - (getTimeToBurn() / 2) - offset).
}

//Unlocks steering to make sure.
//Turns on Sas and waits a little bit
//to prevent problems setting the right mode.
function setSasManeuver {
    unlock steering.
    sas on.
    wait 0.1.
    set sasMode to "maneuver".
}

//Unlock steering to make sure.
//Turns on Sas and waits a little bit
//to prevent problems setting the right mode.
function setSasRetrograde {
    unlock steering.
    sas on.
    wait 0.1.
    set sasMode to "retrograde".
}

//Waits until we're in burn range,
//burns with a default throttle of 1.
function burnNode {
    parameter speed is 1.
    wait until nextnode:eta < (getTimeToBurn() / 2).
    set t to speed.
    wait until mNode:deltaV:mag < 1.
    set t to speed.
    remove mNode.
}

function findFineTuneNode {
    //finetune approach to mun.
    set nodeTime to (eta:transition/2) + time:seconds.
    set mNode to node(nodeTime, 0, 0, 0).
    add mNode.

    //find the 'just right' prograde.
    set dP to 0.1.
    //todo: make sure that it doesnt get stuck in a loop.
    until encounter:periapsis < 20000 {
        //save current periapsis.
        //and current mNode.
        set peri to encounter:periapsis.
        set refNode to mNode.

        //remove mNode.
        remove mNode.

        //set new mNode with prograde increased by dP.
        set mNode to node(nodeTime, refNode:radialOut, refNode:normal, refNode:prograde + dP).
        add mNode.

        //check if the current encounter periasis
        //is closer than before.
        //if not, invert dP for next round and try again.
        if encounter:periapsis > peri {
            set dP to (dP * -1).
        }
    }
    wait 0.1.
}

function enterOrbit {
    //set a node at peri.
    set mNode to node(eta:periapsis + time:seconds, 0, 0, 0).
    add mNode.

    //increase retrograde until we have achieved orbit.
    until mNode:orbit:apoapsis > 0 {
        set refNode to mNode.
        remove mNode.
        set mNode to node(eta:periapsis + time:seconds, 0, 0, refNode:prograde -5).
        add mNode.
    }

    //increase retrograde until we get apo under 25k.
    until mNode:orbit:apoapsis < 25000 {
        set refNode to mNode.
        remove mNode.
        set mNode to node(eta:periapsis + time:seconds, 0, 0, refNode:prograde -5).
        add mNode.
        wait 0.1.
    }
}

//warp to the transition,
//and wait 5 seconds to guarantee smooth transition.
function transition {
    warpSeconds(eta:transition).
    wait 5.
}

//warps to node.
//and executes burn.
function executeNode {
    parameter throttle is 1.
    warpToNode().
    setSasManeuver().
    burnNode(throttle).
}

//slows down to a provided speed.
//using a default throttle of 1.
function slowdownTo {
    parameter speed.
    parameter throttle is 1.
    set t to throttle.
    wait until orbit:velocity:orbit:mag < 50.
    set t to 0.
    wait 0.1.
}

//gets the time required to come to a stop when falling straight down.
function getStopTime {
    return abs(verticalspeed) / (getMaxA() - g).
}

//gettimeToAltitude.
function getTimeToAltitude {
    parameter desiredAltitude is 0.
    return ((alt:radar - desiredAltitude) / abs(verticalspeed)).
}

//woop woop.
function suicideBurn {
    parameter desiredAlt is 0.
    until alt:radar < desiredAlt {
        set timeToAltitude to getTimeToAltitude(desiredAlt).
        set stopTime to getStopTime().
        clearscreen.
        print "BRACE!".
        print "Time to Alt: " + desiredAlt + " : " + timeToAltitude.
        print "stopTime:    " + stopTime.

        if (timeToAltitude < (stopTime)) {
            set t to 1.
        }
        if (timeToAltitude > (stopTime)) {
            set t to 0.
        }
    }
}

function extendGear {
    gear on.
}

function land {
    parameter waitTime is 30.
    set t to 0.
    extendGear().
    set stamp to time:seconds + waitTime.
    until time:seconds > stamp {
        on ag1{
            break.
        }
    }
}

function orbit {
    set orbitspeed to 540.
    set orbitheight to 20000.
    set t to 1.
    set correctionalSpeed to orbitspeed / 20.
    set steer to heading(90, 90).
    wait until ship:velocity:surface:mag > correctionalspeed.
    until ship:apoapsis > orbitheight {
        set down to min((ship:velocity:surface:mag / 10 * correctionalSpeed) * 90, 90).
        set steer to heading(90, down).
    }
    set t to 0.

    finetune(orbitheight).
}

function findEscapeNode {
    set mNode to node(time:seconds + 10, 0, 0, 0).
    add mNode.

    until (mNode:orbit:transition) = "ESCAPE" {
        set newPro to (mNode:prograde + 5).
        remove mNode.
        set mNode to node(time:seconds + 10, 0, 0, newPro).
        add mNode.
    }

    //determine direction.
    //get the lowest point.
    set state to 0.
    set direction to 1.
    until (state = 2) {
        set refNode to mNode.
        set oldPeri to mNode:orbit:nextPatch:periapsis.
        set newEta to (time:seconds + mNode:eta + (orbit:period / 360)).
        remove mNode.
        set mNode to node(newEta, refNode:radialOut, refNode:normal, refNode:prograde).
        add mNode.
        if (oldPeri < mnode:orbit:nextPatch:periapsis) {
            set state to (state + 1).
            set direction to (direction * -1).
        }

    }
}

function escapeToPeri {
    parameter desiredPeri is 60000.
    findEscapeNode().
    executeNode().
    set sasMode to "prograde".
    set t to 1.
    wait until orbit:nextPatch:periapsis < desiredPeri.
    set to to 0.
}

function lowerPeriTo {
    parameter desiredPeri.
    setSasRetrograde().
    wait 5.
    set t to 1.
    wait until orbit:periapsis < desiredPeri.
    set t to 0.
}

//initial stage.
set g to kerbinG.
launch().
finetune().

//find transfer window to the Mun.
findNode().
finetuneNode().

//prepare for burn.
//get to the Mun.
executeNode().

//find finetune node.
findFineTuneNode().
executeNode(0.1).

transition().
enterOrbit().
executeNode().

setSasRetrograde().
wait 10.
set g to munG.
slowdownTo(100).
extendGear().
suicideBurn(12).
land().

orbit().
escapeToPeri().

transition().
warpSeconds(eta:periapsis - 100).
lowerPeriTo(35000).
suicideBurn(12).

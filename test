set t to 0.
set d to 1.
set g to 9.8.
lock throttle to t.
lock steering to up.
print "turning on rcs".
rcs on.
print "staging!".
stage.
set state to 1.
set buffer to 0.
set state to "test".
set startLat to latitude.
set startLon to longitude.
set startMissionTime to missiontime.

function setThrust {
    parameter thrust.
    set t to (thrust / ship:maxthrust).
}

function setTwr {
    parameter targetTwr.
    set t to (targetTwr * ship:mass * g) / ship:maxthrust.
}.

function setSpeed {
    parameter targetSpeed.
    // if verticalspeed is higher, reduce speed.
    // if verticalspeed is lower, increase speed.
    set acceleration to (targetSpeed - verticalspeed).
    setThrust(ship:mass * (acceleration + g)).
}.

function setLat {
    parameter lat.
    print lat.
}

function setLon {
    parameter lon.
    print lon.
}

function getVerticalSpeed {
    return ship:velocity:surface * ship:facing:upvector.
}

set lastTimeStamp to 1.
set lastV to 1.
function getAcceleration {
    set timeTaken to (time:seconds - lastTimeStamp).
    print "timeTaken: " + timeTaken.
    set speedIncreased to (getVerticalSpeed() - lastV).
    print "speedIncreased: " + speedIncreased.
    set lastTimeStamp to time:seconds.
    set lastV to getVerticalSpeed().
    set currentAcceleration to (speedIncreased / timeTaken).
    print "Current A: " + currentAcceleration.
    return currentAcceleration.
}

function setAcceleration {
    parameter a.
    if a < getAcceleration() {
        set ship:control:pitch to -0.1.
    }
    if a > getAcceleration() {
        set ship:control:pitch to 0.1.
    }
}

function getPitch {
    clearscreen.
    print "pitch: " + ship:facing:pitch.
    print "acceleration: " + getAcceleration().
    print "heading: " + heading.
    return ship:facing:pitch.
}

function setPitch {
    parameter pitch.
    lock steering to up + R(pitch, 0, 0).
    clearscreen.
    print "pitch: "  + ship:facing:pitch.
    print "acceleration: " + getAcceleration().
    print "sensorA : " + ship:sensors:acc:mag.
    print "Direction: " + ship:facing:roll.
    return.
}

function goForward {
    //go at 5.
    setPitch(pitch).
}

set pitch to 1.

//main loop.
until state = "stop" {

if state = "test" {
    set height to 150.
    //if height is under 100, go up.
    //if height is above 100, go down.
    setSpeed(height - ship:apoapsis).
}

on ag2 {
    print "going forward!".
    set state to "forward".
}

on ag3 {
    set pitch to 5.
}

on ag4 {
    set pitch to 10.
}

on ag5 {
    set pitch to 40.
}

if state = "forward" {
    set height to 150.
    //if height is under 100, go up.
    //if height is above 100, go down.
    setSpeed(height - ship:apoapsis).
    goForward().
}



on ag1 {
    print "landing!".
    set state to "land".
}

if state = "land" {
    setSpeed((alt:radar) / -5).
    if alt:radar < 5 {
        set state to "stop".
    }
}

    if state = "hover" {
        //When were going too low,
        //increase twr.
        if ship:altitude < 90 {
            print "going UP!".
            setTwr(1.4).
        }

        if ship:altitude < 100 {
            print "going slowly up".
            setTwr(1.1).
        }

        //When were going too high,
        //decrease twr.
        if ship:altitude > (100 - verticalspeed) {
            print "going DOWN!".
            setTwr(0.3).
        }
    }

    if state = "land" {
        until alt:radar < 4 {
            setSpeed(-2).
        }
        setTwr(0).
    }

}.
